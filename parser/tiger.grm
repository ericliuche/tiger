%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp
        | program
        | arithexp
        | expseq
        | nonemptyexpseq
        | vardec
        | fundec
        | typedec
        | ty
        | tyfield
        | tyfieldseq
        | nonemptytyfieldseq
        | decseq
        | letexp
        | funcexp
        | arglist
        | nonemptyarglist

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")





%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: expseq		()

	
exp : arithexp      () 
    | letexp        ()
    | funcexp       ()
    | STRING        ()





(* Sequences of expression *)

nonemptyexpseq : exp                          ()
               | nonemptyexpseq SEMICOLON exp ()

expseq : (* epsilon *)   ()
       | nonemptyexpseq  ()



(* Type-field declarations *)

tyfield : ID COLON ID ()

nonemptytyfieldseq : tyfield                          ()
                   | nonemptytyfieldseq COMMA tyfield ()

tyfieldseq : (* epsilon *)       ()
           | nonemptytyfieldseq  ()



vardec : VAR ID ASSIGN exp        ()
       | VAR COLON ID ASSIGN exp  ()

fundec : FUNCTION ID LPAREN tyfieldseq RPAREN EQ exp          ()
       | FUNCTION ID LPAREN tyfieldseq RPAREN COLON ID EQ exp ()

typedec : TYPE ID EQ ty ()

ty : ID                        ()
   | LBRACE tyfieldseq RBRACE  ()
   | ARRAY OF ID               ()


decseq : (* epsilon *)   ()
       | decseq vardec   ()
       | decseq fundec   ()
       | decseq typedec  ()




nonemptyarglist : exp                        ()
                | nonemptyarglist COMMA exp  ()

arglist : (* epsilon *)     ()
        | nonemptyarglist   ()

funcexp : ID LPAREN arglist RPAREN  ()






arithexp : arithexp PLUS INT      ()
         | arithexp MINUS INT     ()
         | arithexp TIMES INT     ()
         | arithexp DIVIDE INT    () 
         | INT                    ()


letexp : LET decseq IN expseq END  ()

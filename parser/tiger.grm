structure A = Absyn
structure S = Symbol
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS

%nonterm  program of A.exp
        | exp of A.exp
        | expseq of A.exp
        | nonemptyexpseq of (A.exp * A.pos) list
        | vardec of A.dec
        | fundec of A.fundec
        | typedec of {name: S.symbol, ty: A.ty, pos: A.pos}
        | fundecseq of A.dec
        | nonemptyfundecseq of A.fundec list
        | typedecseq of A.dec
        | nonemptytypedecseq of {name: S.symbol, ty: A.ty, pos: A.pos} list
        | decseq of A.dec list
        | dec of A.dec
        | ty of A.ty
        | tyfield of A.field
        | tyfieldseq of A.field list
        | nonemptytyfieldseq of A.field list
        | arglist of A.exp list
        | nonemptyarglist of A.exp list
        | recordfield of S.symbol * A.exp * A.pos
        | recordfieldseq of (S.symbol * A.exp * A.pos) list
        | nonemptyrecordfieldseq of (S.symbol * A.exp * A.pos) list
        | leftval of A.var

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")


%nonassoc ID
%nonassoc LBRACK OF

%right ASSIGN

%left OR
%left AND

%nonassoc EQ NEQ GT GE LT LE

%left PLUS MINUS
%left TIMES DIVIDE 

%nonassoc THEN
%nonassoc ELSE
%nonassoc WHILE DO

%left UMINUS

%%

program	: expseq		(expseq)

	  (* Arithmetic *)
exp : exp PLUS exp     (A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
    | exp MINUS exp    (A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})
    | exp TIMES exp    (A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
    | exp DIVIDE exp   (A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})
    | MINUS exp        %prec UMINUS (A.OpExp{left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft})

    (* Logical *)
    | exp AND exp   (A.IfExp{test=exp1, then'=exp2, else'=SOME (A.IntExp(0)), pos=ANDleft})
    | exp OR exp    (A.IfExp{test=exp1, then'=A.IntExp(1), else'=SOME exp2, pos=ORleft})

    (* Comparisons*)
    | exp EQ exp    (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=EQleft})
    | exp NEQ exp   (A.OpExp{left=exp1, oper=A.NeqOp,right=exp2, pos=NEQleft})
    | exp GT exp    (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=GTleft})
    | exp GE exp    (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=GEleft})
    | exp LT exp    (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=LTleft})
    | exp LE exp    (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=LEleft})

    (* Let *)
    | LET decseq IN expseq END  (A.LetExp{decs=decseq, body=expseq, pos=LETleft})

    (* Function Calls *)
    | ID LPAREN arglist RPAREN  (A.CallExp{func=S.symbol(ID), args=arglist, pos=LPARENleft})
    
    (* Assignment *)
    | leftval ASSIGN exp  (A.AssignExp{var=leftval, exp=exp, pos=ASSIGNleft})
    
    (* Record Instantiation *)
    | ID LBRACE recordfieldseq RBRACE  (A.RecordExp{fields=recordfieldseq, typ=S.symbol(ID), pos=IDleft})
    
    (* Array Instantiation *)
    | ID LBRACK exp RBRACK OF exp (A.ArrayExp{typ=S.symbol(ID), size=exp1, init=exp2, pos=IDleft})
    
    (* Conditionals *)
    | IF exp THEN exp           (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})
    | IF exp THEN exp ELSE exp  (A.IfExp{test=exp1, then'=exp2, else'=SOME exp3, pos=IFleft})
    
    (* Loops *)
    | WHILE exp DO exp                 (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})
    | FOR ID ASSIGN exp TO exp DO exp  (A.ForExp{var=S.symbol(ID), escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})

    (* Grouping *)
    | LPAREN expseq RPAREN (expseq)

    (* Accessible/Assignable Values *)
    | leftval  (A.VarExp(leftval))

    (* Atomic Expressions *)
    | INT      (A.IntExp(INT))
    | STRING   (A.StringExp(STRING, STRINGleft))
    | NIL      (A.NilExp)
    | BREAK    (A.BreakExp(BREAKleft))


(* Sequences of expression *)

nonemptyexpseq : exp                          ([(exp, expleft)])
               | nonemptyexpseq SEMICOLON exp ((exp, expleft) :: nonemptyexpseq)

expseq : (* epsilon *)   (A.SeqExp([]))
       | nonemptyexpseq  (A.SeqExp(rev nonemptyexpseq))


(* Type-field declarations *)

tyfield : ID COLON ID ({name=S.symbol(ID1), escape=ref true, typ=S.symbol(ID2), pos=COLONleft})

nonemptytyfieldseq : tyfield                          ([tyfield])
                   | nonemptytyfieldseq COMMA tyfield (tyfield :: nonemptytyfieldseq)

tyfieldseq : (* epsilon *)       ([])
           | nonemptytyfieldseq  (rev nonemptytyfieldseq)


(* Declarations *)

vardec : VAR ID ASSIGN exp           (A.VarDec{name=S.symbol(ID), escape=ref true, typ=NONE, init=exp, pos=VARleft})
       | VAR ID COLON ID ASSIGN exp  (A.VarDec{name=S.symbol(ID1), escape=ref true, typ=SOME (S.symbol(ID2), ID2left), init=exp, pos=VARleft})

fundec : FUNCTION ID LPAREN tyfieldseq RPAREN EQ exp          ({name=S.symbol(ID), params=tyfieldseq, result=NONE, body=exp, pos=FUNCTIONleft})
       | FUNCTION ID LPAREN tyfieldseq RPAREN COLON ID EQ exp ({name=S.symbol(ID1), params=tyfieldseq, result=SOME (S.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft})

typedec : TYPE ID EQ ty ({name=S.symbol(ID), ty=ty, pos=TYPEleft})

ty : ID                        (A.NameTy(S.symbol(ID), IDleft))
   | LBRACE tyfieldseq RBRACE  (A.RecordTy(tyfieldseq))
   | ARRAY OF ID               (A.ArrayTy(S.symbol(ID), IDleft))



nonemptyfundecseq : fundec                    ([fundec])
                  | nonemptyfundecseq fundec  (fundec :: nonemptyfundecseq)

fundecseq : nonemptyfundecseq  (A.FunctionDec(rev nonemptyfundecseq))

nonemptytypedecseq : typedec                     ([typedec])
                   | nonemptytypedecseq typedec  (typedec :: nonemptytypedecseq)

typedecseq : nonemptytypedecseq  (A.TypeDec(rev nonemptytypedecseq))

dec : vardec      (vardec)
    | fundecseq   (fundecseq)
    | typedecseq  (typedecseq)

decseq : (* epsilon *)   ([])
       | decseq dec      (decseq @ [dec])







(* Argument Lists *)

nonemptyarglist : exp                        ([exp])
                | nonemptyarglist COMMA exp  (exp :: nonemptyarglist)

arglist : (* epsilon *)     ([])
        | nonemptyarglist   (rev nonemptyarglist)


(* Assignable/Accessible Values *)

leftval : ID                         (A.SimpleVar(S.symbol(ID), IDleft))
        | leftval DOT ID             (A.FieldVar(leftval, S.symbol(ID), DOTleft))
        | leftval LBRACK exp RBRACK  (A.SubscriptVar(leftval, exp, LBRACKleft))
        | ID LBRACK exp RBRACK       (A.SubscriptVar(A.SimpleVar(S.symbol(ID), IDleft), exp, LBRACKleft))


(* Fields within Records *)

recordfield : ID EQ exp  ((S.symbol(ID), exp, IDleft))

recordfieldseq : (* epsilon *)           ([])
               | nonemptyrecordfieldseq  (rev nonemptyrecordfieldseq)

nonemptyrecordfieldseq : recordfield                               ([recordfield])
                       | nonemptyrecordfieldseq COMMA recordfield  (recordfield :: nonemptyrecordfieldseq)

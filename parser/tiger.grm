%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS

%nonterm  exp | program
        | expseq | nonemptyexpseq
        | vardec | fundec | typedec | decseq
        | ty | tyfield | tyfieldseq | nonemptytyfieldseq
        | arglist | nonemptyarglist
        | recordfield | recordfieldseq | nonemptyrecordfieldseq
        | leftval

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")


%nonassoc ID
%nonassoc LBRACK OF

%right ASSIGN

%left OR
%left AND

%nonassoc EQ NEQ GT GE LT LE

%left PLUS MINUS
%left TIMES DIVIDE 

%nonassoc THEN
%nonassoc ELSE
%nonassoc WHILE DO

%left UMINUS

%%

program	: expseq		()

	  (* Arithmetic *)
exp : exp PLUS exp     ()
    | exp MINUS exp    ()
    | exp TIMES exp    ()
    | exp DIVIDE exp   ()
    | MINUS exp        %prec UMINUS ()

    (* Logical *)
    | exp AND exp   ()
    | exp OR exp    ()

    (* Comparisons*)
    | exp EQ exp    ()
    | exp NEQ exp   ()
    | exp GT exp    ()
    | exp GE exp    ()
    | exp LT exp    ()
    | exp LE exp    ()

    (* Let *)
    | LET decseq IN expseq END  ()

    (* Function Calls *)
    | ID LPAREN arglist RPAREN  ()
    
    (* Assignment *)
    | leftval ASSIGN exp  ()
    
    (* Record Instantiation *)
    | ID LBRACE recordfieldseq RBRACE  ()
    
    (* Array Instantiation *)
    | ID LBRACK exp RBRACK OF exp ()
    
    (* Conditionals *)
    | IF exp THEN exp           ()
    | IF exp THEN exp ELSE exp  ()
    
    (* Loops *)
    | WHILE exp DO exp                 ()
    | FOR ID ASSIGN exp TO exp DO exp  ()

    (* Grouping *)
    | LPAREN expseq RPAREN ()

    (* Accessible/Assignable Values *)
    | leftval  ()

    (* Atomic Expressions *)
    | INT      ()
    | STRING   ()
    | NIL      ()
    | BREAK    ()


(* Sequences of expression *)

nonemptyexpseq : exp                          ()
               | nonemptyexpseq SEMICOLON exp ()

expseq : (* epsilon *)   ()
       | nonemptyexpseq  ()


(* Type-field declarations *)

tyfield : ID COLON ID ()

nonemptytyfieldseq : tyfield                          ()
                   | nonemptytyfieldseq COMMA tyfield ()

tyfieldseq : (* epsilon *)       ()
           | nonemptytyfieldseq  ()


(* Declarations *)

vardec : VAR ID ASSIGN exp           ()
       | VAR ID COLON ID ASSIGN exp  ()

fundec : FUNCTION ID LPAREN tyfieldseq RPAREN EQ exp          ()
       | FUNCTION ID LPAREN tyfieldseq RPAREN COLON ID EQ exp ()

typedec : TYPE ID EQ ty ()

ty : ID                        ()
   | LBRACE tyfieldseq RBRACE  ()
   | ARRAY OF ID               ()

decseq : (* epsilon *)   ()
       | decseq vardec   ()
       | decseq fundec   ()
       | decseq typedec  ()


(* Argument Lists *)

nonemptyarglist : exp                        ()
                | nonemptyarglist COMMA exp  ()

arglist : (* epsilon *)     ()
        | nonemptyarglist   ()


(* Assignable/Accessible Values *)

leftval : ID                         ()
        | leftval DOT ID             ()
        | leftval LBRACK exp RBRACK  ()
        | ID LBRACK exp RBRACK       ()


(* Fields within Records *)

recordfield : ID EQ exp  ()

recordfieldseq : (* epsilon *)           ()
               | nonemptyrecordfieldseq  ()

nonemptyrecordfieldseq : recordfield                               ()
                       | nonemptyrecordfieldseq COMMA recordfield  ()
